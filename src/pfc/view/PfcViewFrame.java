/*
 * Copyright (c) 2002 Ernest Yu. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the 
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

package pfc.view;

import java.io.*;
import java.util.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import pfc.cab.*;
import pfc.export.*;
import pfc.images.*;

/**
 *  Main window for the PfcViewer application.
 *
 *  @author Ernie Yu
 *  <br>29 Mar 2002 - MailSelectionListener skips adjusting list events.
 */
public class PfcViewFrame extends javax.swing.JFrame {
    
    private static final String VERSION = "Version 0.5";
    private static final String VERSION_DATE = "5 Feb 2011";
    
    /** Creates new form PfcViewFrame */
    public PfcViewFrame() {
        initComponents();
        setSize(800, 600);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jFileChooserOpen = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPaneFolders = new javax.swing.JScrollPane();
        jTreeFolders = new javax.swing.JTree();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPaneList = new javax.swing.JScrollPane();
        jTableList = new javax.swing.JTable();
        jPanelMessage = new javax.swing.JPanel();
        jTextAreaHead = new javax.swing.JTextArea();
        jScrollPaneBody = new javax.swing.JScrollPane();
        jEditorPaneBody = new javax.swing.JEditorPane();
        jTextStatus = new javax.swing.JTextField();
        jToolBarMain = new javax.swing.JToolBar();
        jButtonOpen = new javax.swing.JButton();
        jButtonCopy = new javax.swing.JButton();
        jButtonOptions = new javax.swing.JButton();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenuExportFave = new javax.swing.JMenu();
        jMenuItemToHtml = new javax.swing.JMenuItem();
        jMenuExportMail = new javax.swing.JMenu();
        jMenuItemToMbox = new javax.swing.JMenuItem();
        jMenuItemToMboxToc = new javax.swing.JMenuItem();
        jMenuItemToText = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuItemOptions = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jFileChooserOpen.setCurrentDirectory(new File(System.getProperty("user.dir")));

        setTitle("PFC Viewer");
        setIconImage(ImageConstants.createImage(ImageConstants.PROGRAM_LOGO));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(8);
        jSplitPane1.setOneTouchExpandable(true);
        jTreeFolders.setModel(null);
        jTreeFolders.getSelectionModel().setSelectionMode(
            javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTreeFolders.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeFoldersValueChanged(evt);
            }
        });

        jScrollPaneFolders.setViewportView(jTreeFolders);

        jSplitPane1.setLeftComponent(jScrollPaneFolders);

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setDividerSize(8);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);
        tableModel = new CabinetTableModel();
        jTableList.setModel(tableModel);
        ListSelectionModel selectModel = jTableList.getSelectionModel();
        selectModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectModel.addListSelectionListener(new MailSelectionListener());
        jScrollPaneList.setViewportView(jTableList);

        jSplitPane2.setTopComponent(jScrollPaneList);

        jPanelMessage.setLayout(new java.awt.BorderLayout());

        jTextAreaHead.setBackground(new java.awt.Color(204, 255, 204));
        jTextAreaHead.setEditable(false);
        jTextAreaHead.setRows(4);
        jTextAreaHead.setTabSize(4);
        jPanelMessage.add(jTextAreaHead, java.awt.BorderLayout.NORTH);

        jEditorPaneBody.setEditable(false);
        jScrollPaneBody.setViewportView(jEditorPaneBody);

        jPanelMessage.add(jScrollPaneBody, java.awt.BorderLayout.CENTER);

        jSplitPane2.setBottomComponent(jPanelMessage);

        jSplitPane1.setRightComponent(jSplitPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jTextStatus.setBackground(getBackground());
        jTextStatus.setEditable(false);
        jTextStatus.setText("Ready.");
        jTextStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextStatus.setFocusable(false);
        getContentPane().add(jTextStatus, java.awt.BorderLayout.SOUTH);

        jToolBarMain.setFloatable(false);
        jButtonOpen.setAction(fileOpenAction);
        jButtonOpen.setText(null);
        jToolBarMain.add(jButtonOpen);

        jButtonCopy.setAction(editCopyAction);
        jButtonCopy.setText(null);
        jToolBarMain.add(jButtonCopy);

        jButtonOptions.setAction(toolsOptionsAction);
        jButtonOptions.setText(null);
        jToolBarMain.add(jButtonOptions);

        getContentPane().add(jToolBarMain, java.awt.BorderLayout.NORTH);

        jMenuFile.setMnemonic('F');
        jMenuFile.setText("File");
        jMenuItemOpen.setAction(fileOpenAction);
        jMenuFile.add(jMenuItemOpen);

        jMenuItemClose.setAction(fileCloseAction);
        jMenuFile.add(jMenuItemClose);

        jMenuFile.add(jSeparator1);

        jMenuItemExit.setAction(fileExitAction);
        jMenuFile.add(jMenuItemExit);

        jMenuBarMain.add(jMenuFile);

        jMenuEdit.setMnemonic('E');
        jMenuEdit.setText("Edit");
        jMenuItemCopy.setAction(editCopyAction);
        jMenuEdit.add(jMenuItemCopy);

        jMenuBarMain.add(jMenuEdit);

        jMenuTools.setMnemonic('T');
        jMenuTools.setText("Tools");
        jMenuExportFave.setIcon(ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
        jMenuExportFave.setMnemonic('F');
        jMenuExportFave.setText("Export Favorites");
        jMenuItemToHtml.setAction(toolsExportFaveAction);
        jMenuExportFave.add(jMenuItemToHtml);

        jMenuTools.add(jMenuExportFave);

        jMenuExportMail.setIcon(ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
        jMenuExportMail.setMnemonic('M');
        jMenuExportMail.setText("Export Mail");

        jMenuItemToMbox.setAction(toolsExportMboxAction);
        jMenuExportMail.add(jMenuItemToMbox);

        jMenuItemToMboxToc.setAction(toolsExportMboxTocAction);
        jMenuExportMail.add(jMenuItemToMboxToc);

        jMenuItemToText.setAction(toolsExportTextAction);
        jMenuExportMail.add(jMenuItemToText);

        jMenuTools.add(jMenuExportMail);

        jMenuTools.add(jSeparator2);

        jMenuItemOptions.setAction(toolsOptionsAction);
        jMenuTools.add(jMenuItemOptions);

        jMenuTools.add(jSeparator3);

        jMenuItemAbout.setAction(toolsAboutAction);
        jMenuTools.add(jMenuItemAbout);

        jMenuBarMain.add(jMenuTools);

        setJMenuBar(jMenuBarMain);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jTreeFoldersValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeFoldersValueChanged
        // Add your handling code here:
        // Get selected folder item, and set folder in table model.
        CabinetItem folder = (CabinetItem)jTreeFolders.getLastSelectedPathComponent();
        tableModel.setFolder(folder);
        // Clear text area.
        jTextAreaHead.setText(null);
        jEditorPaneBody.setText(null);
    }//GEN-LAST:event_jTreeFoldersValueChanged
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /** Enables menu items based on current cabinet status.
     */
    private void enableMenuItems() {
        if (cabinet == null) {
            fileOpenAction.setEnabled(true);
            fileCloseAction.setEnabled(false);
        } else {
            fileOpenAction.setEnabled(false);
            fileCloseAction.setEnabled(true);
        }
    }
    
    /** Initializes hash table of text actions associated with text components.
     */
    private void initTextActions(JTextComponent textComponent) {
        this.textActions = new Hashtable();
        Action[] actions = textComponent.getActions();
        for (int i = 0; i < actions.length; i++) {
            Action action = actions[i];
            this.textActions.put(action.getValue(Action.NAME), action);
        }        
    }
    
    /** Retrieves text action by name.
     */
    private Action getTextAction(String name) {
        if (this.textActions == null) {
            initTextActions(jEditorPaneBody);
        }
        return (Action) this.textActions.get(name);
    }
    
    /** This is primarily for testing.  The PfcViewer class should be
     *  called to process the command line arguments and start the 
     *  application.
     *  @param args the command line arguments
     */
    public static void main(String args[]) {
        new PfcViewFrame().setVisible(true);
    }
    
    /** Displays application frame, and opens cabinet if file name is
     *  specified.  This is called by the PfcViewer class to display the
     *  main application window after it has parsed the command line 
     *  arguments.
     */
    public void display(String filename) {
        // Initialize menu state.
        enableMenuItems();
        // Center window on screen.
        setLocationRelativeTo(null);
        // Display application window.
        setVisible(true);
        // Open cabinet file if specified.
        if (filename != null) { 
            ((FileOpenAction) fileOpenAction).openCabinetFile(filename);
        }
    }
    
    // Custom variables
    private RandomAccessFile pfcFile;
    private Cabinet cabinet;
    private CabinetTableModel tableModel;
    private File lastExportDir = new File(System.getProperty("user.dir"));
    private Hashtable textActions;
    // User options
    private boolean appendHeaders = false;      // append mail headers
    private boolean browserForHtml = false;     // browser view for HTML
    // Menu actions
    private Action fileOpenAction = new FileOpenAction();
    private Action fileCloseAction = new FileCloseAction();
    private Action fileExitAction = new FileExitAction();
    private Action editCopyAction = new EditCopyAction();
    private Action toolsExportFaveAction = new ToolsExportAction(Exporter.FAVE_HTML);
    private Action toolsExportMboxAction = new ToolsExportAction(Exporter.MBOX);
    private Action toolsExportMboxTocAction = new ToolsExportAction(Exporter.MBOX_TOC);
    private Action toolsExportTextAction = new ToolsExportAction(Exporter.TEXT);
    private Action toolsOptionsAction = new ToolsOptionsAction();
    private Action toolsAboutAction = new ToolsAboutAction();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCopy;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonOptions;
    private javax.swing.JEditorPane jEditorPaneBody;
    private javax.swing.JFileChooser jFileChooserOpen;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuExportFave;
    private javax.swing.JMenu jMenuExportMail;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemOptions;
    private javax.swing.JMenuItem jMenuItemToHtml;
    private javax.swing.JMenuItem jMenuItemToMbox;
    private javax.swing.JMenuItem jMenuItemToText;
    private javax.swing.JMenuItem jMenuItemToMboxToc;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanelMessage;
    private javax.swing.JScrollPane jScrollPaneBody;
    private javax.swing.JScrollPane jScrollPaneFolders;
    private javax.swing.JScrollPane jScrollPaneList;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTableList;
    private javax.swing.JTextArea jTextAreaHead;
    private javax.swing.JTextField jTextStatus;
    private javax.swing.JToolBar jToolBarMain;
    private javax.swing.JTree jTreeFolders;
    // End of variables declaration//GEN-END:variables
    
    //----------------------------------------------------------------------
    /**
     *  Inner class to handle File Open menu event.
     */
    public class FileOpenAction extends AbstractAction {
        
        /** Constructs an action to open a cabinet file. */
        public FileOpenAction() {
            super("Open...");
            putValue(SHORT_DESCRIPTION, getValue(NAME));
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_O));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_OPEN));
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
        }
        
        /** Invoked when an action occurs.  Displays the Open dialog to
         *  select the cabinet file, and calls the openCabinetFile()
         *  method to load its contents.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            int result = jFileChooserOpen.showOpenDialog(PfcViewFrame.this);
            if (result == JFileChooser.APPROVE_OPTION) {
                // Get selected file path and name, and open cabinet.
                String filename = jFileChooserOpen.getSelectedFile().getAbsolutePath();
                openCabinetFile(filename);
            }
        }
        
        /** Opens selected cabinet file.  When the file is successfully
         *  read, this method sets the cabinet and table model for the
         *  application frame.
         */
        public void openCabinetFile(String filename) {
            jTextStatus.setText("Reading cabinet file " + filename);

            // Open the cabinet file in read-only mode
            try {
                pfcFile = new RandomAccessFile(filename, "r");
            } catch (FileNotFoundException ex) {
                jOptionPane1.showMessageDialog(PfcViewFrame.this, ex.toString(),
                        "Open Cabinet", JOptionPane.ERROR_MESSAGE);
                jTextStatus.setText("Could not read cabinet file " + filename);
                return;
            }

            // Create progress dialog.
            ProgressDialog dialog = new ProgressDialog(PfcViewFrame.this, true);
        
            // Create CabinetMaker and start thread to read cabinet file.
            CabinetMaker maker = new CabinetMaker(pfcFile);
            maker.setProgressBar(dialog.getProgressBar());
            maker.setProgressDialog(dialog);
            Thread thread = new Thread(maker);
            thread.start();
        
            // Display progress dialog.
            dialog.setLocationRelativeTo(PfcViewFrame.this);
            dialog.setVisible(true);
        
            // Dialog returns when thread ends, or user presses Cancel.
            // Make sure thread is dead.
            if (thread.isAlive()) { 
                thread.interrupt(); 
            }

            // Check exception and progress for completion.
            Exception exception = maker.getException();
            int percent = maker.getProgressPct();
            if ((exception == null) && (percent == 100)) {
                // Get cabinet, and set tree model to display folders.
                cabinet = maker.getCabinet();
                jTreeFolders.setModel(new CabinetTreeModel(cabinet));
                // Set cabinet in table model.
                tableModel.setCabinet(cabinet);
                enableMenuItems();
                jTextStatus.setText("Ready.");
            } 
            else {
                if (exception != null) {
                    jOptionPane1.showMessageDialog(PfcViewFrame.this, 
                        exception.toString(), 
                        "Open Cabinet", JOptionPane.ERROR_MESSAGE);
                }
                jTextStatus.setText("Stopped at " + percent + "%");
            }
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Inner class to handle File Close menu event.
     */
    public class FileCloseAction extends AbstractAction {
        /** Constructs an action to close the cabinet file.
         */
        public FileCloseAction() {
            super("Close");
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_C));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
        }
        
        /** Invoked when an action occurs to close the cabinet file.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cabinet = null;
            jTreeFolders.setModel(null);
            tableModel.setCabinet(null);
            // Close cabinet file.
            if (pfcFile != null) {
                try {
                    pfcFile.close();
                } catch (IOException iox) {}
            }
            enableMenuItems();
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Inner class to handle File Exit menu event.
     */
    public class FileExitAction extends AbstractAction {
        /** Constructs an action to exit the application.
         */
        public FileExitAction() {
            super("Exit");
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_X));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
        }
        
        /** Invoked when an action occurs to exit the application.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            System.exit(0);
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Inner class to handle Edit Copy menu event.
     */
    public class EditCopyAction extends AbstractAction {
        /** Constructs an action to copy text.
         */
        public EditCopyAction() {
            super("Copy");
            putValue(SHORT_DESCRIPTION, getValue(NAME));
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_C));
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_COPY));
        }
        
        /** Invoked when an action occurs to copy text.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            getTextAction(DefaultEditorKit.copyAction).actionPerformed(evt);
        }
    }
    
    //----------------------------------------------------------------------
    /**
     *  Inner class to handle Tools Export menu event.
     */
    public class ToolsExportAction extends AbstractAction {
        /** Indicates export type. */
        private int exportType;
        
        /** Constructor with argument to specify export type.  Possible export
         *  types are declared as constants in the Exporter interface.
         */
        public ToolsExportAction(int type) {
            exportType = type;
            switch (exportType) {
                case Exporter.FAVE_HTML:
                    putValue(NAME, "To Html...");
                    putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_H));
                    putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
                    break;
                case Exporter.MBOX: 
                    putValue(NAME, "To Mbox...");
                    putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_B));
                    putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
                    break;
                case Exporter.MBOX_TOC:
                    putValue(NAME, "To Mbox+Toc...");
                    putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_C));
                    putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
                    break;
                case Exporter.TEXT:
                   putValue(NAME, "To Text...");
                   putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_T));
                   putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
                   break;
                default:
                   putValue(NAME, "To Text...");
                   putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_Z));
                   putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
                   break;
            }
        }
        
        /** Invoked when an action occurs.  Displays the Save dialog for 
         *  the export file, and creates an Exporter object to perform the
         *  operation.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            // Get selected folder from tree model.
            CabinetItem folder = (CabinetItem)jTreeFolders.getLastSelectedPathComponent();
            if (folder == null) {
                jOptionPane1.showMessageDialog(PfcViewFrame.this, 
                    "Please select a folder to export.", 
                    "Export", JOptionPane.PLAIN_MESSAGE);
                return;
            }
        
            jTextStatus.setText("Exporting items in " + folder.toString());
        
            // Create export Save dialog.
            JFileChooser jFileChooser2 = new JFileChooser();
            jFileChooser2.setDialogType(JFileChooser.SAVE_DIALOG);
            jFileChooser2.setCurrentDirectory(lastExportDir);
            
            // Set default file name and filter.
            File defaultFile = null;
            ExportFileFilter defaultFilter = null;
            switch (exportType) {
                case Exporter.MBOX: 
                case Exporter.MBOX_TOC:
                    defaultFile = new File(folder.toString() + ".mbx");
                    defaultFilter = new ExportFileFilter(".mbx", "mbox mail file");
                    break;
                case Exporter.FAVE_HTML:
                    defaultFile = new File("bookmarks.html");
                    defaultFilter = new ExportFileFilter(".html", "Hypertext file");
                    break;
                default:
                    defaultFile = new File(folder.toString() + ".txt");
                    defaultFilter = new ExportFileFilter(".txt", "Text file");
            }
            jFileChooser2.setSelectedFile(defaultFile);
            jFileChooser2.setFileFilter(defaultFilter);

            File selectedFile = null;
            int result;
            do {
                // Show Save dialog for export directory and file.
                result = jFileChooser2.showSaveDialog(PfcViewFrame.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    selectedFile = jFileChooser2.getSelectedFile();
                    lastExportDir = selectedFile.getParentFile();
                    // If file exists, prompt user to overwrite.
                    if (selectedFile.exists()) {
                        if (jOptionPane1.showConfirmDialog(PfcViewFrame.this, 
                            "Overwrite existing file " + selectedFile.getName() + "?", 
                            "Export", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) { 
                            continue; 
                        }
                    }
                }
                break;
            } while (true);
            
            // File selection okay, so export folder.
            if (result == JFileChooser.APPROVE_OPTION) {
                // Create factory and get exporter object.
                ExporterFactory factory = new ExporterFactory(exportType);
                Exporter exporter = factory.getExporter(selectedFile);
                int exportCount = 0;
                try {
                    exportCount = cabinet.export(folder, exporter);
                }
                catch (ExportException ex) {
                    jOptionPane1.showMessageDialog(PfcViewFrame.this, 
                        ex.toString(), 
                        "Export", JOptionPane.ERROR_MESSAGE);
                }
                finally {
                    exporter.close();
                    jOptionPane1.showMessageDialog(PfcViewFrame.this, 
                        String.valueOf(exportCount) + " items exported to " +
                        selectedFile.getAbsolutePath(), 
                        "Export", JOptionPane.PLAIN_MESSAGE);
                }
            }
            jTextStatus.setText("Ready.");
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Inner class to handle Tools Options menu event.
     */
    public class ToolsOptionsAction extends AbstractAction {
        /** Constructs an action to display the Options dialog.
         */
        public ToolsOptionsAction() {
            super("Options...");
            putValue(SHORT_DESCRIPTION, getValue(NAME));
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_O));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_PREFERENCES));
        }
        
        /** Invoked when an action occurs.  This displays the Options dialog,
         *  and updates the user settings for the text display pane.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OptionsDialog options = new OptionsDialog(PfcViewFrame.this, true);
            options.setAppendHeaders(appendHeaders);
            options.setBrowserView(browserForHtml);
            options.setLocationRelativeTo(PfcViewFrame.this);
            if (options.display()) {
                appendHeaders = options.isAppendHeaders();
                browserForHtml = options.isBrowserView();
                // Update text display pane.
                new MailSelectionListener().valueChanged(
                    new ListSelectionEvent(jTableList, 0, 0, false));
            }
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Inner class to handle Tools About menu event.
     */
    public class ToolsAboutAction extends AbstractAction {
        /** Constructs an action to display the About dialog.
         */
        public ToolsAboutAction() {
            super("About...");
            putValue(MNEMONIC_KEY, new Integer(KeyEvent.VK_A));
            putValue(SMALL_ICON, ImageConstants.createImageIcon(ImageConstants.ICON_BLANK));
        }
        
        /** Invoked when an action occurs to display the About dialog.
         */
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AboutDialog about = new AboutDialog(PfcViewFrame.this, true);
            about.setVersion(VERSION);
            about.setDate(VERSION_DATE);
            about.setLocationRelativeTo(PfcViewFrame.this);
            about.setVisible(true);
        }
    }
    
    //----------------------------------------------------------------------
    /**
     *  Inner class to handle mail selection event in table selection model
     *  for folder items.
     */
    public class MailSelectionListener implements ListSelectionListener {

        /** Called whenever the value of the selection changes.  This
         *  method updates the displayed text.
         *  @param evt the event that characterizes the change.
         */
        public void valueChanged(ListSelectionEvent evt) {
            // Skip transitional events; only set text on mouse-up event.
            if (evt.getValueIsAdjusting()) { return; }

            // Get index pointer for selected row.
            int row = jTableList.getSelectedRow();
            String index = (String)jTableList.getValueAt(row,  3);
            // Skip if index string is invalid.
            if ((index == null) || (index.trim().length() == 0)) { return; }

            // Get envelope item and check type.
            int indexPtr = Integer.parseInt(index);
            CabinetItem envelope = cabinet.getCabinetItem(indexPtr);
            
            if (envelope.getType() == CabinetItem.MAIL_ENVELOPE) {
                // Get data item pointer.
                int dataPtr = envelope.getData();
                boolean outgoing = envelope.isOutgoing();
                if (dataPtr > 0) { 
                    CabinetItem item = cabinet.getCabinetItem(dataPtr);
                    // Create mail message using item content.
                    MailMessage message = new MailMessage(item.getContent());
                    jTextAreaHead.setText(message.toHeadString(outgoing));
                    jTextAreaHead.setCaretPosition(0);
                    // Set editor pane text to message body text.
                    if (browserForHtml && (message.isHtml())) {
                        jEditorPaneBody.setContentType("text/html");
                        jEditorPaneBody.setText(message.toTextString(false));
                        jEditorPaneBody.setCaretPosition(0);
                    } else {
                        jEditorPaneBody.setContentType("text/plain");
                        jEditorPaneBody.setText(message.toTextString(appendHeaders));
                        jEditorPaneBody.setCaretPosition(0);
                    }
                }
            }
            else if (envelope.getType() == CabinetItem.FAVE_ENVELOPE) {
                // Get data item pointer.
                int dataPtr = envelope.getData();
                if (dataPtr > 0) { 
                    CabinetItem item = cabinet.getCabinetItem(dataPtr);
                    // Create favorite using item content.
                    Favorite favorite = new Favorite(item.getContent());
                    // Set text area to URL string.
                    jEditorPaneBody.setContentType("text/plain");
                    jEditorPaneBody.setText(favorite.getUrl());
                    jEditorPaneBody.setCaretPosition(0);
                }
            }
            else if (envelope.getType() == CabinetItem.ADDR_ENVELOPE) {
                // Get data item pointer.
                int dataPtr = envelope.getData();
                if (dataPtr > 0) { 
                    CabinetItem item = cabinet.getCabinetItem(dataPtr);
                    // Create address book object using item content.
                    Address address = new Address(item.getContent());
                    jTextAreaHead.setText(address.toHeadString());
                    jTextAreaHead.setCaretPosition(0);
                    // Set text area to URL string.
                    jEditorPaneBody.setContentType("text/plain");
                    jEditorPaneBody.setText(address.toTextString());
                    jEditorPaneBody.setCaretPosition(0);
                }
            }
            else if (envelope.getType() == CabinetItem.GROUP_ENVELOPE) {
                // Get data item pointer.
                int dataPtr = envelope.getData();
                if (dataPtr > 0) { 
                    CabinetItem item = cabinet.getCabinetItem(dataPtr);
                    // Create address group object using item content.
                    AddressGroup group = new AddressGroup(item.getContent());
                    jTextAreaHead.setText(group.toHeadString());
                    jTextAreaHead.setCaretPosition(0);
                    // Set text area to URL string.
                    jEditorPaneBody.setContentType("text/plain");
                    jEditorPaneBody.setText(group.toTextString());
                    jEditorPaneBody.setCaretPosition(0);
                }
            }
        }
    }

    //----------------------------------------------------------------------
    /**
     *  Represents file filter for selected export method.
     */
    public class ExportFileFilter extends javax.swing.filechooser.FileFilter {
        private String extension;
        private String description;
        
        /** Constructor accepts file extension and description. */
        public ExportFileFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }
        
        /** Whether the given file is accepted by this filter.
         */
        public boolean accept(File f) {
            return ((f.getName().toLowerCase().endsWith(extension))
                || f.isDirectory());
        }
        
        /** The description of this filter.
         */
        public String getDescription() {
            return description;
        }
    }
}
